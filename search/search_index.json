{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AC Flower Factory Welcome! AC Flower Factory is designed to help those playing Animal Crossing New Horizons to build large amounts of rare hybrid flowers. There are many (of there soon will be) guides that show the basics of breeding hybrid flowers and how to get each hybrid. This site will contain some of that info, but the emphasis is on making tons of a specific kind of flower. If you want to make a ton of blue roses to make your friends jealous, you've come to the right place. If you just want to know how to make purple windflowers, this site may be too detailed.","title":"Home"},{"location":"#ac-flower-factory","text":"Welcome! AC Flower Factory is designed to help those playing Animal Crossing New Horizons to build large amounts of rare hybrid flowers. There are many (of there soon will be) guides that show the basics of breeding hybrid flowers and how to get each hybrid. This site will contain some of that info, but the emphasis is on making tons of a specific kind of flower. If you want to make a ton of blue roses to make your friends jealous, you've come to the right place. If you just want to know how to make purple windflowers, this site may be too detailed.","title":"AC Flower Factory"},{"location":"Linux/","text":"Linux Unzipping a .tar.gz file tar xvzf file.tar.gz Where x : This option tells tar to extract the files. v : The \u201cv\u201d stands for \u201cverbose.\u201d This option will list all of the files one by one in the archive. z : The z option is very important and tells the tar command to uncompress the file (gzip). f : This options tells tar that you are going to give it a file name to work with.","title":"Linux"},{"location":"Linux/#linux","text":"","title":"Linux"},{"location":"Linux/#unzipping-a-targz-file","text":"tar xvzf file.tar.gz Where x : This option tells tar to extract the files. v : The \u201cv\u201d stands for \u201cverbose.\u201d This option will list all of the files one by one in the archive. z : The z option is very important and tells the tar command to uncompress the file (gzip). f : This options tells tar that you are going to give it a file name to work with.","title":"Unzipping a .tar.gz file"},{"location":"R/","text":"R Tidyverse ggplot2 See the ggplot2 book online for more information List of extensions to GGplot Website maintaining extensions - makes it easier to find ggplot extensions for what you need Flipbook to modify major parts of the graph - flipbook for messing with parts of the graph. Blog version of modifying everything in ggplot2 Another step by step ggplot violin plot Legend theme(legend.position = c(.8, .2)) # top, bottom, left, right geom_point(aes(x,y), show.legend = FALSE) Scales/Palettes Using RColorBrewer RColorBrewer::display.brewer.all() # see all palettes scale_color_brewer(palette = \"RdPu\") # distinct colors scale_color_distiller(palette = \"RdPu\") # for continuous data Using manual scales scale_linetype_manual(name = \"Linetypes\", labels=c(...), values = c(\"blank\", \"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\")) # w/ grey cbPalette <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\") # w/ black cbbPalette <- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\") scale_color_manual(name = \"Colors\", values=cbPalette) scale_fill_manual(name = \"Colors\", values=cbPalette) Labels labs(x=\"x\", y=\"y\", title=\"Title\", subtitle=\"Subtitle\") Statistical Summaries ggplot(diamonds, aes(color, price)) + geom_bar(stat = \"summary_bin\", fun.y = mean) Themes Ch 15 of ggplot2 book has comprehensive guide on themes. Multiplots library(gridExtra) plot1 <- qplot(1) plot2 <- qplot(1) grid.arrange(plot1, plot2, ncol=2) Ggplotly Example of customizing tooltip Cool example of detailed visualizations in ggplot Cocktails with UMAP Saving plots Nice defaults for plots in slides Programming with dplyr quo - is used to mark the variable name as literal, kind of like quotes \" enquo - is used to look INSIDE what the variable, and quote that! It uses \"dark magic\" my_summarise <- function(df, group_var) { df %>% group_by(!! group_var) %>% summarise(a = mean(a)) } my_summarise(df, quo(g1)) In order to make the call my_summarise(df, g1) , we need to make the following change: my_summarise <- function(df, group_var) { group_var <- enquo(group_var) df %>% group_by(!! group_var) %>% summarise(a = mean(a)) } my_summarise(df, g1) If you have a string that you want denoted, you should use rlang::sym as suggested here . When you want a variable for the column name, you need to make use of the syntax !! colname := function(x) ... , otherwise it's not valid R code. You can filter with expressions using the parse_expr function in the rlang package as follows expr <- paste0(\"s\",1:2, \" == \", c(0,1), collapse = \" & \") # s1 == 0 & s2 == 1 filter(df, !!parse_expr(expr)) Recipes Getting relative frequencies from dplyr - note that summarize unwraps the last grouping, can check with groups() . useful for bar plots of the frequencies mtcars %>% group_by(am, gear) %>% summarise(n = n()) %>% mutate(freq = n / sum(n)) # Gets Rel Freq from WITHIN all counts of am Reordering x for bar graphs ggplot(theTable, aes(x=reorder(Position,Position, function(x)-length(x)))) + geom_bar() Lubridate Tibble as_tibble(...,) For forcing matrices, as_tibble(mat, .name_repair = ~c(\"a\", \"b\", \"c\")) allows you to name the columns for matrices without column names in one line bind_rows or bind_col is more efficient for combining lots of dataframes Packages Creating them R official reference - pretty complete version of creating the packages Spatial Source list for spatial with crowd sourced twitter List of packages sf raster sp leaflet tmap mapview rgdal cartography gstat tigris Useful Functions to remember gl() - Factor level generation xtabs() - Cross table generation table() - see table of distribution search() see all packages that have been loaded Cookbook Working with formula object in R formula(y~x1 + x2) # create the formula object frame <- model.frame(formula, data, drop.unused.levels = TRUE) # Get the relevant columns in the data frame used in the formula model.matrix(formula, frame) # create the `X` matrix for working with the levels in the frame above based on formula attr(rhs, \"assign\") - attribute contains the index of variable that each column of model matrix comes from. If 3 levels, you would need intercept, and 2 columns of the model matrix. Row-wise workflows Examples in this workshop Working with factors as.numeric(levels(temp))[temp] # unfactor temp factor(cheese$additive, levels(cheese$additive)[c(4,1:3)]) # Reorder the factors reorder(cheese$additive, cheese$scores, FUN = mean) # Relevel additives factor, by their average score Data Cleaning Use library(tidyr) , this is the new interface into reshape gather() - fat to narrow spread() - narrow to fat gather(key, value, columns) GGplot force legend with constant aes Shortcuts Option+ Shift + k - show keyboard shortcuts Kable kable(TABLE, booktabs=T) %>% kable_styling(position = center) %>% row_spec(2, hline_after=T) Advanced R Data Structures 6 Atomic types: logical, integer, double, character, complex, raw 3 properties of vectors: typeof(), length(), attributes() Coercion is least to most flexible, atomic type Most important attributes: Names, Dimensions, Class Objects Need library(pryr) to use the main functions. typeof() - base type otype() - object type ftype() - tells you if \"generic\" function or \"method\" is.object(x) - Checks if has \"class\" attribute Generic Functions In the S3 Object system, methods don't belong to a class, but belong to a generic function. Generic are responsible for something called method dispatch in which they are supposed to find the right method to use for the call. This is a system for polymorphism that is used in the Lisp system, but not very common otherwise. ftype() summary # the generic function summary.lm # methods associated with generic function summary.glm > ftype(summary) [1] \"s3\" \"generic\" > ftype(summary.lm) [1] \"s3\" \"method\" > methods(summary) [1] summary.aov summary.aovlist* [3] summary.aspell* summary.check_packages_in_dir* [5] summary.connection summary.corAR1* [7] summary.corARMA* summary.corCAR1* Classes are very casual in S3, it's essentially treated as an attribute, and can even have multiple classes, eg. glm. UseMethod though will look for the appropriate method based on the class that you pass to the class. DO NOT USE . when naming methods! It will make it look like an S3 object foo <- c(1, 2, 3, 4) class(foo) <- \"something\" t(foo) # will look for the method t.something to run Environments Environments are basically just like lists, with 4 special characteristics. 1. They have parents, 2. elements of the list are not numbered 3. Each element defined is unique 4. Must use rm() to remove from environment, rather than setting to null. Special Environments .GlobalEnv ( globalenv() ) - the global environment baseenv() environment of base, parent is emptyenv emptyenv() # ancestor of all. Only environment without a parent. Packages have two associated environments, ls() - examine the elements of an environment rm() - to remove something from environment ls.str() - looks at the environment with structure as well pryr::where(\"name\") - What environment is the name found in, with regular scoping rules do.call(what, args, envir) - construct Environment things version sessionInfo() .libPaths() Error checking When debugging a detailed series of function calls, can use: options(error = recover) Matrix Related Matrix Package These are the dense matrices * dgeMatrix - Real matrices in general storage mode * dsyMatrix - Symmetric real matrices in non-packed storage * dspMatrix - Symmetric real matrices in packed storage (one triangle only) * dtrMatrix - Triangular real matrices in non-packed storage * dtpMatrix - Triangular real matrices in packed storage (triangle only) * dpoMatrix - Positive semi-definite symmetric real matrices in non-packed storage * dppMatrix - ditto in packed storage sparse matrices * dgTMatrix - general, numeric, sparse matrices in (a possibly redundant) triplet form. This can be a convenient form in which to construct sparse matrices. * dgCMatrix - general, numeric, sparse matrices in the (sorted) compressed sparse column format. * dsCMatrix - symmetric, real, sparse matrices in the (sorted) compressed sparse column format. Only the upper or the lower triangle is stored. Although there is provision for both forms, the lower triangle form works best with TAUCS. * dtCMatrix - triangular, real, sparse matrices in the (sorted) compressed sparse column format. as(X, \"dgCMatrix\") # Force into sparse Matrix forceSymmetric(x, uplo = \"U\") # take uplo = Upper (U) or Lower (L) symmpart(x) # Average both upper and lower triangle skewpart(x) # The difference between x and symmpart Matrix Decompositions qrX <- qr(X) # Gives QR object qr.Q (qrX) # Gives the Q part qr.R(qrX) # Gives the R part qrX$rank # Gives the rank Analysis ANOVA/LM Helpful Twitter thread on ANOVA Getting started with emmeans Nonlinear nls - seems to be the function to do so in R mod <- nls(..., start = list(a = 0, b =2)) # initialize parameters yourself to avoid fit issues profile(mod, which = \"parameter\") confint(profile(mod)) # seems to be the safer way of doing things.. as to not run into optimization issues Mixed Models ranef(mod) - get random effects from model dotplot.ranef.mer(randef(mod)) - dotplot of random effects, needs lattice attr(ranef(mod)$Subject, \"postVar\") - There's also a \"hidden\" conditional variance associated with each of the random effects, these are accessed by the attribute \"postVar\" this is the vcov of each of the random effects I think? as.data.frame(ranef(mod)) gives a secret representation of conditional variances getMF(mod, [\"X\", \"Z\"]) - get the fixed and random effect model matrices Further Reading * Getting subject level standard errors * Ben Bolker FAQ * Estimated zero variance of estimate, Bates Email thread GLMs model.matrix(mod) - gets the design matrix mod$linear.predictors - X\\beta 2x2 contingencies table(dat$tx, dat$survival) - create contingency table addmargins() - add row and column sums to 2x2 table cut(dat$w6minBl, quantile(dat$w6minBl,0:5/5,na.rm=T), include.lowest = TRUE)) - Create strata X <- table(dat$tx,dat$survival, dnn = c(\"TX\", \"Survival\")) X d <- factor(c(\"treat\",\"notreat\"), levels=c(\"treat\",\"notreat\")) modci <- glm(X~d, family=binomial) summary(modci) exp(confint(modci)[2,]) # Conf int Residuals plot(mod) # Pearson Residuals diagnostics resid(mod, type=\"Deviance\") # Deviance, Pearson, Working, Response, Partial mod$residuals # Gives Working residuals Contrast Coding Overview by UCLA Some more detailed investigation Crawley, 2002, is supposed to be a \"transparent introduction\" to contrast coding, according to adonis documentation Useful Links R Style Guide R Inferno Collection of R Examples","title":"R"},{"location":"R/#r","text":"","title":"R"},{"location":"R/#tidyverse","text":"","title":"Tidyverse"},{"location":"R/#ggplot2","text":"See the ggplot2 book online for more information","title":"ggplot2"},{"location":"R/#programming-with-dplyr","text":"quo - is used to mark the variable name as literal, kind of like quotes \" enquo - is used to look INSIDE what the variable, and quote that! It uses \"dark magic\" my_summarise <- function(df, group_var) { df %>% group_by(!! group_var) %>% summarise(a = mean(a)) } my_summarise(df, quo(g1)) In order to make the call my_summarise(df, g1) , we need to make the following change: my_summarise <- function(df, group_var) { group_var <- enquo(group_var) df %>% group_by(!! group_var) %>% summarise(a = mean(a)) } my_summarise(df, g1) If you have a string that you want denoted, you should use rlang::sym as suggested here . When you want a variable for the column name, you need to make use of the syntax !! colname := function(x) ... , otherwise it's not valid R code. You can filter with expressions using the parse_expr function in the rlang package as follows expr <- paste0(\"s\",1:2, \" == \", c(0,1), collapse = \" & \") # s1 == 0 & s2 == 1 filter(df, !!parse_expr(expr))","title":"Programming with dplyr"},{"location":"R/#lubridate","text":"","title":"Lubridate"},{"location":"R/#tibble","text":"as_tibble(...,) For forcing matrices, as_tibble(mat, .name_repair = ~c(\"a\", \"b\", \"c\")) allows you to name the columns for matrices without column names in one line bind_rows or bind_col is more efficient for combining lots of dataframes","title":"Tibble"},{"location":"R/#packages","text":"","title":"Packages"},{"location":"R/#creating-them","text":"R official reference - pretty complete version of creating the packages","title":"Creating them"},{"location":"R/#spatial","text":"Source list for spatial with crowd sourced twitter List of packages sf raster sp leaflet tmap mapview rgdal cartography gstat tigris","title":"Spatial"},{"location":"R/#useful-functions-to-remember","text":"gl() - Factor level generation xtabs() - Cross table generation table() - see table of distribution search() see all packages that have been loaded","title":"Useful Functions to remember"},{"location":"R/#cookbook","text":"","title":"Cookbook"},{"location":"R/#working-with-formula-object-in-r","text":"formula(y~x1 + x2) # create the formula object frame <- model.frame(formula, data, drop.unused.levels = TRUE) # Get the relevant columns in the data frame used in the formula model.matrix(formula, frame) # create the `X` matrix for working with the levels in the frame above based on formula attr(rhs, \"assign\") - attribute contains the index of variable that each column of model matrix comes from. If 3 levels, you would need intercept, and 2 columns of the model matrix.","title":"Working with formula object in R"},{"location":"R/#row-wise-workflows","text":"Examples in this workshop","title":"Row-wise workflows"},{"location":"R/#working-with-factors","text":"as.numeric(levels(temp))[temp] # unfactor temp factor(cheese$additive, levels(cheese$additive)[c(4,1:3)]) # Reorder the factors reorder(cheese$additive, cheese$scores, FUN = mean) # Relevel additives factor, by their average score","title":"Working with factors"},{"location":"R/#data-cleaning","text":"Use library(tidyr) , this is the new interface into reshape gather() - fat to narrow spread() - narrow to fat gather(key, value, columns) GGplot force legend with constant aes","title":"Data Cleaning"},{"location":"R/#shortcuts","text":"Option+ Shift + k - show keyboard shortcuts","title":"Shortcuts"},{"location":"R/#kable","text":"kable(TABLE, booktabs=T) %>% kable_styling(position = center) %>% row_spec(2, hline_after=T)","title":"Kable"},{"location":"R/#advanced-r","text":"","title":"Advanced R"},{"location":"R/#data-structures","text":"6 Atomic types: logical, integer, double, character, complex, raw 3 properties of vectors: typeof(), length(), attributes() Coercion is least to most flexible, atomic type Most important attributes: Names, Dimensions, Class","title":"Data Structures"},{"location":"R/#objects","text":"Need library(pryr) to use the main functions. typeof() - base type otype() - object type ftype() - tells you if \"generic\" function or \"method\" is.object(x) - Checks if has \"class\" attribute","title":"Objects"},{"location":"R/#generic-functions","text":"In the S3 Object system, methods don't belong to a class, but belong to a generic function. Generic are responsible for something called method dispatch in which they are supposed to find the right method to use for the call. This is a system for polymorphism that is used in the Lisp system, but not very common otherwise. ftype() summary # the generic function summary.lm # methods associated with generic function summary.glm > ftype(summary) [1] \"s3\" \"generic\" > ftype(summary.lm) [1] \"s3\" \"method\" > methods(summary) [1] summary.aov summary.aovlist* [3] summary.aspell* summary.check_packages_in_dir* [5] summary.connection summary.corAR1* [7] summary.corARMA* summary.corCAR1* Classes are very casual in S3, it's essentially treated as an attribute, and can even have multiple classes, eg. glm. UseMethod though will look for the appropriate method based on the class that you pass to the class. DO NOT USE . when naming methods! It will make it look like an S3 object foo <- c(1, 2, 3, 4) class(foo) <- \"something\" t(foo) # will look for the method t.something to run","title":"Generic Functions"},{"location":"R/#environments","text":"Environments are basically just like lists, with 4 special characteristics. 1. They have parents, 2. elements of the list are not numbered 3. Each element defined is unique 4. Must use rm() to remove from environment, rather than setting to null. Special Environments .GlobalEnv ( globalenv() ) - the global environment baseenv() environment of base, parent is emptyenv emptyenv() # ancestor of all. Only environment without a parent. Packages have two associated environments, ls() - examine the elements of an environment rm() - to remove something from environment ls.str() - looks at the environment with structure as well pryr::where(\"name\") - What environment is the name found in, with regular scoping rules do.call(what, args, envir) - construct","title":"Environments"},{"location":"R/#environment-things","text":"version sessionInfo() .libPaths()","title":"Environment things"},{"location":"R/#error-checking","text":"When debugging a detailed series of function calls, can use: options(error = recover)","title":"Error checking"},{"location":"R/#matrix-related","text":"","title":"Matrix Related"},{"location":"R/#matrix-package","text":"These are the dense matrices * dgeMatrix - Real matrices in general storage mode * dsyMatrix - Symmetric real matrices in non-packed storage * dspMatrix - Symmetric real matrices in packed storage (one triangle only) * dtrMatrix - Triangular real matrices in non-packed storage * dtpMatrix - Triangular real matrices in packed storage (triangle only) * dpoMatrix - Positive semi-definite symmetric real matrices in non-packed storage * dppMatrix - ditto in packed storage sparse matrices * dgTMatrix - general, numeric, sparse matrices in (a possibly redundant) triplet form. This can be a convenient form in which to construct sparse matrices. * dgCMatrix - general, numeric, sparse matrices in the (sorted) compressed sparse column format. * dsCMatrix - symmetric, real, sparse matrices in the (sorted) compressed sparse column format. Only the upper or the lower triangle is stored. Although there is provision for both forms, the lower triangle form works best with TAUCS. * dtCMatrix - triangular, real, sparse matrices in the (sorted) compressed sparse column format. as(X, \"dgCMatrix\") # Force into sparse Matrix forceSymmetric(x, uplo = \"U\") # take uplo = Upper (U) or Lower (L) symmpart(x) # Average both upper and lower triangle skewpart(x) # The difference between x and symmpart","title":"Matrix Package"},{"location":"R/#matrix-decompositions","text":"qrX <- qr(X) # Gives QR object qr.Q (qrX) # Gives the Q part qr.R(qrX) # Gives the R part qrX$rank # Gives the rank","title":"Matrix Decompositions"},{"location":"R/#analysis","text":"","title":"Analysis"},{"location":"R/#anovalm","text":"Helpful Twitter thread on ANOVA Getting started with emmeans","title":"ANOVA/LM"},{"location":"R/#nonlinear","text":"nls - seems to be the function to do so in R mod <- nls(..., start = list(a = 0, b =2)) # initialize parameters yourself to avoid fit issues profile(mod, which = \"parameter\") confint(profile(mod)) # seems to be the safer way of doing things.. as to not run into optimization issues","title":"Nonlinear"},{"location":"R/#mixed-models","text":"ranef(mod) - get random effects from model dotplot.ranef.mer(randef(mod)) - dotplot of random effects, needs lattice attr(ranef(mod)$Subject, \"postVar\") - There's also a \"hidden\" conditional variance associated with each of the random effects, these are accessed by the attribute \"postVar\" this is the vcov of each of the random effects I think? as.data.frame(ranef(mod)) gives a secret representation of conditional variances getMF(mod, [\"X\", \"Z\"]) - get the fixed and random effect model matrices Further Reading * Getting subject level standard errors * Ben Bolker FAQ * Estimated zero variance of estimate, Bates Email thread","title":"Mixed Models"},{"location":"R/#glms","text":"model.matrix(mod) - gets the design matrix mod$linear.predictors - X\\beta","title":"GLMs"},{"location":"R/#2x2-contingencies","text":"table(dat$tx, dat$survival) - create contingency table addmargins() - add row and column sums to 2x2 table cut(dat$w6minBl, quantile(dat$w6minBl,0:5/5,na.rm=T), include.lowest = TRUE)) - Create strata X <- table(dat$tx,dat$survival, dnn = c(\"TX\", \"Survival\")) X d <- factor(c(\"treat\",\"notreat\"), levels=c(\"treat\",\"notreat\")) modci <- glm(X~d, family=binomial) summary(modci) exp(confint(modci)[2,]) # Conf int Residuals plot(mod) # Pearson Residuals diagnostics resid(mod, type=\"Deviance\") # Deviance, Pearson, Working, Response, Partial mod$residuals # Gives Working residuals","title":"2x2 contingencies"},{"location":"R/#contrast-coding","text":"Overview by UCLA Some more detailed investigation Crawley, 2002, is supposed to be a \"transparent introduction\" to contrast coding, according to adonis documentation","title":"Contrast Coding"},{"location":"R/#useful-links","text":"R Style Guide R Inferno Collection of R Examples","title":"Useful Links"},{"location":"Rmd/","text":"R Markdown Adding appendix to file ## Appendix: R Code ```{r appendix, ref.label=knitr::all_labels(),echo=TRUE,eval=FALSE} ``` Options Reasonable for reports ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = FALSE, cache = TRUE, warning = FALSE, message = FALSE) knitr::opts_chunk$set(fig.width=10, fig.height=5) ``` Tables A reasonable default table (requires knitr and kableExtra ) ```{r} kable_standard <- function(...) { kable(booktabs = TRUE, ...) %>% kable_styling(full_width = FALSE) } ``` Note that adding latex_options = c(\"hold_position) may be useful in holding tables to their current position. I wasn't able to get it to work. An alternative (but tedious) option is to add keep_tex: TRUE to the YAML (under pdf_document: ) and manually add [!htbp] at the end of the \\begin{figure} line in the .tex file. Almost anything you'd want to do with a latex table can be found at Create Awesome LaTeX Table with knitr::kable and kableExtra","title":"R Markdown"},{"location":"Rmd/#r-markdown","text":"","title":"R Markdown"},{"location":"Rmd/#adding-appendix-to-file","text":"## Appendix: R Code ```{r appendix, ref.label=knitr::all_labels(),echo=TRUE,eval=FALSE} ```","title":"Adding appendix to file"},{"location":"Rmd/#options","text":"","title":"Options"},{"location":"Rmd/#tables","text":"A reasonable default table (requires knitr and kableExtra ) ```{r} kable_standard <- function(...) { kable(booktabs = TRUE, ...) %>% kable_styling(full_width = FALSE) } ``` Note that adding latex_options = c(\"hold_position) may be useful in holding tables to their current position. I wasn't able to get it to work. An alternative (but tedious) option is to add keep_tex: TRUE to the YAML (under pdf_document: ) and manually add [!htbp] at the end of the \\begin{figure} line in the .tex file. Almost anything you'd want to do with a latex table can be found at Create Awesome LaTeX Table with knitr::kable and kableExtra","title":"Tables"},{"location":"git_commands/","text":"Push git push --set-upstream <remote> <local branch> # creates remote branch with same name Reset/Revert/Checkout The best reference is Atlassian Git Reset/Revert/Checkout The 3 trees are: 1. working 2. staging 3. commit history checkout works on the HEAD pointer only, so switching branches or changing files reset works on both HEAD and the branch pointer, three flavors --soft , --mixed (default) , --hard . Reset file to commit git checkout <hash> -- <file1> <file2> # Reset files to a certain hash, defaults to head Cherry-Pick git cherry-pick is used when you want to selectively apply a commit to your current branch. git cherry-pick -x <commit-hash> - The -x option is to add a message saying which commit was applied. The commit hash is the commit you wish to apply to the current branch. Stashing git stash - runs git stash push and saves a local snapshot git stash show - shows the modifications of the most recent stash.. git stash list - shows the stack of stashes of changes made. git stash pop - defaults to applying the top stash on the stack. Inverse of git stash push Clean git clean -n - get rid of untracked, dry run git clean -f - actually remove them Diff git diff - shows differences of the working tree and HEAD git diff --staged - shows differences of the staged files and HEAD Tags Git tag Branches git checkout -b <new-branch-name> <start-point> git fetch <remote> <branch> - leaving off the branch gets all branches Log With the zsh aliases. glol - view all the changes glola - view all, even included the fetched branches glol master..upstream/master - see all the commits between master and the upstream/master branch. Show Show a particular git object, tree or commit git show # shows most recent commit git show -5 <filename> # Last 5 commits that changed a particular file git show --name-only <commit-hash> # see only the files changed in the commit Merge git merge origin/master Pull git pull Fetch Refspec The Internal Refspec The refspec looks like this fetch = +refs/heads/master:refs/remotes/origin/master This says that with fetch, by default will only update the master ref to. The format is <src>:<dst> , in which we look on the remote server for <src> , and track them locally in <dst> . + says if it's not a fast forward, do it anyway. Hence, for an example command (the first is short for the second) git fetch origin master:refs/remotes/origin/master git fetch origin refs/heads/master:refs/remotes/origin/master Looks on the origin remote, for a branch called master , and writes the hashcode into the file .git/refs/remotes/origin/master . That is, it's tracked by origin/master . We can also look on the remote server for checking out a certain pull request. In order to see all the refs on a remote server, we can run, git ls-remote <remote> Common Workflows Working on common repository Make a fork on Github and clone it locally Setup the original as a remote repository. origin should be your copy of it git remote add upstream https:github.com/user/project.git Update the repository occasionally git fetch upstream Other helpful commands glola # In Zsh alias to see log with everything in refs Examining a Pull Request snapshot Method 1 is probably the easiest Create branch pr40 locally from pull request refspec on the remote server upstream git fetch upstream pull/40/head:pr40 Checkout the pr git checkout pr40 Other helpful commands git ls-remote <remote> # view all refspecs on remote server Method 2 is to pull directly from other person's branch. The other way to work on the project is to pull changes from the user's copy of the repo. Fork the repo Clone the repo Create some branch to hold the pull request Pull the merge request branch into your local repository on the newly created branch Updating a Pull Request Note that you must have proper permission to push onto someone else's branch. The forks of the original repository will copy the permissions of the original repo. Otherwise you could make a pull request to someone else's forked repo in order for the changes to be tracked on the original pull request. Push the changes onto their forked copy, with the same branch name. Making a Pull Request Make a fork of the repository Working with Dotfiles Dotfile Managment Tutorial The setup steps are creating a bare repository with the $HOME directory is the working tree. git init --bare $HOME/.cfg alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME' config config --local status.showUntrackedFiles no echo \"alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'\" >> $HOME/.bashrc The usage of this is as follows: config ls-files # See files under git control config status # everything else works normally config add path_to_file config remote -v config push Managing a Web Server on a live server Git to Manage Live Web Site Might be worth looking into to set up the SGSA website this way. Merge Conflicts Undoing previous commit git commit --ammend - makes another commit, but modifies the previous commit","title":"Git and Github"},{"location":"git_commands/#push","text":"git push --set-upstream <remote> <local branch> # creates remote branch with same name","title":"Push"},{"location":"git_commands/#resetrevertcheckout","text":"The best reference is Atlassian Git Reset/Revert/Checkout The 3 trees are: 1. working 2. staging 3. commit history checkout works on the HEAD pointer only, so switching branches or changing files reset works on both HEAD and the branch pointer, three flavors --soft , --mixed (default) , --hard .","title":"Reset/Revert/Checkout"},{"location":"git_commands/#reset-file-to-commit","text":"git checkout <hash> -- <file1> <file2> # Reset files to a certain hash, defaults to head","title":"Reset file to commit"},{"location":"git_commands/#cherry-pick","text":"git cherry-pick is used when you want to selectively apply a commit to your current branch. git cherry-pick -x <commit-hash> - The -x option is to add a message saying which commit was applied. The commit hash is the commit you wish to apply to the current branch.","title":"Cherry-Pick"},{"location":"git_commands/#stashing","text":"git stash - runs git stash push and saves a local snapshot git stash show - shows the modifications of the most recent stash.. git stash list - shows the stack of stashes of changes made. git stash pop - defaults to applying the top stash on the stack. Inverse of git stash push","title":"Stashing"},{"location":"git_commands/#clean","text":"git clean -n - get rid of untracked, dry run git clean -f - actually remove them","title":"Clean"},{"location":"git_commands/#diff","text":"git diff - shows differences of the working tree and HEAD git diff --staged - shows differences of the staged files and HEAD","title":"Diff"},{"location":"git_commands/#tags","text":"Git tag","title":"Tags"},{"location":"git_commands/#branches","text":"git checkout -b <new-branch-name> <start-point> git fetch <remote> <branch> - leaving off the branch gets all branches","title":"Branches"},{"location":"git_commands/#log","text":"With the zsh aliases. glol - view all the changes glola - view all, even included the fetched branches glol master..upstream/master - see all the commits between master and the upstream/master branch.","title":"Log"},{"location":"git_commands/#show","text":"Show a particular git object, tree or commit git show # shows most recent commit git show -5 <filename> # Last 5 commits that changed a particular file git show --name-only <commit-hash> # see only the files changed in the commit","title":"Show"},{"location":"git_commands/#merge","text":"git merge origin/master","title":"Merge"},{"location":"git_commands/#pull","text":"git pull","title":"Pull"},{"location":"git_commands/#fetch","text":"","title":"Fetch"},{"location":"git_commands/#refspec","text":"The Internal Refspec The refspec looks like this fetch = +refs/heads/master:refs/remotes/origin/master This says that with fetch, by default will only update the master ref to. The format is <src>:<dst> , in which we look on the remote server for <src> , and track them locally in <dst> . + says if it's not a fast forward, do it anyway. Hence, for an example command (the first is short for the second) git fetch origin master:refs/remotes/origin/master git fetch origin refs/heads/master:refs/remotes/origin/master Looks on the origin remote, for a branch called master , and writes the hashcode into the file .git/refs/remotes/origin/master . That is, it's tracked by origin/master . We can also look on the remote server for checking out a certain pull request. In order to see all the refs on a remote server, we can run, git ls-remote <remote>","title":"Refspec"},{"location":"git_commands/#common-workflows","text":"","title":"Common Workflows"},{"location":"git_commands/#working-on-common-repository","text":"Make a fork on Github and clone it locally Setup the original as a remote repository. origin should be your copy of it git remote add upstream https:github.com/user/project.git Update the repository occasionally git fetch upstream Other helpful commands glola # In Zsh alias to see log with everything in refs","title":"Working on common repository"},{"location":"git_commands/#examining-a-pull-request-snapshot","text":"Method 1 is probably the easiest Create branch pr40 locally from pull request refspec on the remote server upstream git fetch upstream pull/40/head:pr40 Checkout the pr git checkout pr40 Other helpful commands git ls-remote <remote> # view all refspecs on remote server Method 2 is to pull directly from other person's branch. The other way to work on the project is to pull changes from the user's copy of the repo. Fork the repo Clone the repo Create some branch to hold the pull request Pull the merge request branch into your local repository on the newly created branch","title":"Examining a Pull Request snapshot"},{"location":"git_commands/#updating-a-pull-request","text":"Note that you must have proper permission to push onto someone else's branch. The forks of the original repository will copy the permissions of the original repo. Otherwise you could make a pull request to someone else's forked repo in order for the changes to be tracked on the original pull request. Push the changes onto their forked copy, with the same branch name.","title":"Updating a Pull Request"},{"location":"git_commands/#making-a-pull-request","text":"Make a fork of the repository","title":"Making a Pull Request"},{"location":"git_commands/#working-with-dotfiles","text":"Dotfile Managment Tutorial The setup steps are creating a bare repository with the $HOME directory is the working tree. git init --bare $HOME/.cfg alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME' config config --local status.showUntrackedFiles no echo \"alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'\" >> $HOME/.bashrc The usage of this is as follows: config ls-files # See files under git control config status # everything else works normally config add path_to_file config remote -v config push","title":"Working with Dotfiles"},{"location":"git_commands/#managing-a-web-server-on-a-live-server","text":"Git to Manage Live Web Site Might be worth looking into to set up the SGSA website this way.","title":"Managing a Web Server on a live server"},{"location":"git_commands/#merge-conflicts","text":"","title":"Merge Conflicts"},{"location":"git_commands/#undoing-previous-commit","text":"git commit --ammend - makes another commit, but modifies the previous commit","title":"Undoing previous commit"},{"location":"intro/","text":"","title":"Intro"},{"location":"matlab/","text":"Matlab Basic whos - variabls in the current workspace Matrices [v,d] = eigs(L,3,\u2019sa\u2019); - 3 smallest eigenvectors and values Graphs","title":"Matlab"},{"location":"matlab/#matlab","text":"","title":"Matlab"},{"location":"matlab/#basic","text":"whos - variabls in the current workspace","title":"Basic"},{"location":"matlab/#matrices","text":"[v,d] = eigs(L,3,\u2019sa\u2019); - 3 smallest eigenvectors and values","title":"Matrices"},{"location":"matlab/#graphs","text":"","title":"Graphs"},{"location":"mkdocs/","text":"Tabs in the navigation With the material theme, sub-navigation items can be used to add horizontal tabs to the navigation. This may be useful if the documentation gets large or extends beyond code, but is not currently implemented nav: - Code: - R: R.md - Matlab: matlab.md - New tab: - Mkdocs: mkdocs.md theme: name: 'material' feature: tabs: true Table of Contents To change table of contents, updated options in the following code in the .yaml file: markdown_extensions: - toc: toc_depth: 3 toc_depth changes the lowest heading that will be shown in the table of contents Collapsible section in Markdown See https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab for more details # A collapsible section with markdown <details> <summary>Click to expand!</summary> ## Heading 1. A numbered 2. list * With some * Sub bullets </details>","title":"Mkdocs"},{"location":"mkdocs/#tabs-in-the-navigation","text":"With the material theme, sub-navigation items can be used to add horizontal tabs to the navigation. This may be useful if the documentation gets large or extends beyond code, but is not currently implemented nav: - Code: - R: R.md - Matlab: matlab.md - New tab: - Mkdocs: mkdocs.md theme: name: 'material' feature: tabs: true","title":"Tabs in the navigation"},{"location":"mkdocs/#table-of-contents","text":"To change table of contents, updated options in the following code in the .yaml file: markdown_extensions: - toc: toc_depth: 3 toc_depth changes the lowest heading that will be shown in the table of contents","title":"Table of Contents"},{"location":"mkdocs/#collapsible-section-in-markdown","text":"See https://gist.github.com/pierrejoubert73/902cc94d79424356a8d20be2b382e1ab for more details # A collapsible section with markdown <details> <summary>Click to expand!</summary> ## Heading 1. A numbered 2. list * With some * Sub bullets </details>","title":"Collapsible section in Markdown"},{"location":"shell/","text":"Shell Tar $ tar -xvf archive.tar or $ tar -xvzf file.tar.gz -[x | c] : extract | create archive v : The \u201cv\u201d stands for \u201cverbose.\u201d This option will list all of the files one by one in the archive. z : The z option is very important and tells the tar command to uncompress the file (gzip). f : This options tells tar that you are going to give it a file name to work with. Zsh functions After M-x you can input zsh functions _expand_alias - you can expand aliases... Dotfile Control Using the bare repository method outlined here For use, you can be in any directory and just use config as you normally would. config add .FILENAME Shell Parameter Expansion In Bash In Zsh Recipes % matches end %%*. for file type, greedy till end # matches beginning wget wget -r -np -l 1 -A zip http://example.com/download/ -r, --recursive specify recursive download. -np, --no-parent don't ascend to the parent directory. -l, --level=NUMBER maximum recursion depth (inf or 0 for infinite). -A, --accept=LIST comma-separated list of accepted extensions.","title":"Shell"},{"location":"shell/#shell","text":"","title":"Shell"},{"location":"shell/#tar","text":"$ tar -xvf archive.tar or $ tar -xvzf file.tar.gz -[x | c] : extract | create archive v : The \u201cv\u201d stands for \u201cverbose.\u201d This option will list all of the files one by one in the archive. z : The z option is very important and tells the tar command to uncompress the file (gzip). f : This options tells tar that you are going to give it a file name to work with.","title":"Tar"},{"location":"shell/#zsh-functions","text":"After M-x you can input zsh functions _expand_alias - you can expand aliases...","title":"Zsh functions"},{"location":"shell/#dotfile-control","text":"Using the bare repository method outlined here For use, you can be in any directory and just use config as you normally would. config add .FILENAME","title":"Dotfile Control"},{"location":"shell/#shell-parameter-expansion","text":"In Bash In Zsh","title":"Shell Parameter Expansion"},{"location":"shell/#recipes","text":"% matches end %%*. for file type, greedy till end # matches beginning","title":"Recipes"},{"location":"shell/#wget","text":"wget -r -np -l 1 -A zip http://example.com/download/ -r, --recursive specify recursive download. -np, --no-parent don't ascend to the parent directory. -l, --level=NUMBER maximum recursion depth (inf or 0 for infinite). -A, --accept=LIST comma-separated list of accepted extensions.","title":"wget"},{"location":"tex/","text":"Tex General Difference between Engine and Formats. The webpage here makes sense of the different levels of TeX https://www.tug.org/levels.html Miscellaneous Spacing between itemize \\begin{itemize} \\setlength\\itemsep{-.5em} \\item ... \\item ... \\end{itemize} Side by Side \\makebox[\\textwidth][c]{% \\begin{minipage}{.3\\linewidth} \\begin{align*} \\frac{\\mathrm{d} X}{\\mathrm{d} t} & = \\beta\\frac{S}{n}X \\\\ \\frac{\\mathrm{d} S}{\\mathrm{d} t} & = - \\beta\\frac{S}{n}X \\end{align*} \\end{minipage}% \\begin{minipage}{.3\\linewidth} \\begin{align*} \\frac{\\mathrm{d} x}{\\mathrm{d} t} & = \\beta sx \\\\ \\frac{\\mathrm{d} s}{\\mathrm{d} t} & = - \\beta xs \\end{align*} \\end{minipage} } \\begin{minipage}[tbp]{width_of_page} - A minipage is a smaller page inside the main page, can control how close things are displayed \\makebox[\\textwidth][c]{%} - centers the two pages next to each other, as long as it's less than the linewidth Title Page \\documentclass{article} ... \\begin{document} \\begin{titlepage} \\centering {\\scshape \\Large Math 714 \\par} \\vspace{2cm} {\\bfseries \\huge Homework 1} \\vfill {\\Large\\itshape Michael Liou\\par} \\vfill {\\large \\today\\par} \\end{titlepage} \\end{document} Bibtex How bibtex generally works. You have a .bib file that is the \"database\" of all the entries. In the .tex file, this would be a minimal file \\documentclass{article} \\title{Example of bibtex} \\bibliographystyle{plain} \\begin{document} This example is from \\cite{Kant}. \\bibliography{master} \\end{document} The .bib file should look like this @book{durrett2019probability, place={Cambridge}, edition={5}, series={Cambridge Series in Statistical and Probabilistic Mathematics}, title={Probability: Theory and Examples}, DOI={10.1017/9781108591034}, publisher={Cambridge University Press}, author={Durrett, Rick}, year={2019}, collection={Cambridge Series in Statistical and Probabilistic Mathematics} } The document looks for master.bib in the directory of the tex file. You may need to run pdflatex -> bibtex -> pdflatex -> pdflatex . I have no idea what's going on in this sequence, but it seems necessary to generate the references correctly. bibtex from the command line looks at the generated .aux file for proper references. There, it will look for a \\bibitem for the database of references, and use that file to make sure all the references are found. If not the error messages/log will tell you which references in the original .tex document are not found. I'd also recommend using the package natbib . OverLeaf on natbib tlmgr This is the Tex Live Package Manager Fixing the error \"bbm.sty\" not found, we can find the package that it's in. tlmgr search --file bbm.sty --global sudo tlmgr install NAME_OF_PACKAGE Installation of additional Packages Texmf tree, is tex and metafonts. The data file structure is TDS, tex directory structure. https://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages Tables (Booktabs) This is the package you should be using if you create a table. Here's a helpful reference Tables \\begin{table*}[!ht] \\centering \\begin{tabular}{llllllll} \\toprule \\phantom{abc} & \\multicolumn{7}{c}{Round}\\\\ & 1 & 2 & 3 & 4 & 5 & 6 & 7 \\\\ \\midrule Arm 1 & 10 & & 0 & 0 & 0 & \\\\ Arm 2 & & 0 & & & & 10 & 0 \\\\ \\bottomrule \\end{tabular} \\end{table*} Algorithms Just use Algorithmicx . The syntax is easier than Algorithm2e, and it's fine. Mathematical images http://ctan.mirrors.hoobly.com/info/lshort/english/lshort.pdf http://www.texample.net/tikz/ http://www.texample.net/tikz/resources/#tools-that-generate-pgftikz-code Tikz Axes \\draw [{Latex[length=2mm]}-{Latex[length=2mm]}] (1,0) node [below] {$P$} -- (0,0) -- (0,1) node [left] {$\\beta (P)$}; Curves \\draw plot [smooth, tension=1] coordinates{(0, .7) (.5, .05) (1, .7)}; \\draw [] (0, .7) to[in=180, out=0] (.5, .05) to[in=180, out=0] (1, .7) Dots \\node [circle, fill, inner sep=1pt] at (0,1) {}; Shapes \\draw [red, dashed] (0, 0) circle (5); Graphs \\usetikzlibrary{graphs, graphdrawing} % graphdrawing makes the graph layout automatic \\usegdlibrary{layered, force} % provides \"force\" and \"layered\" layouts \\usetikzlibrary{positioning} % right = of a \\begin{tikzpicture} \\graph[spring layout, nodes={circle, draw, .5pt}, edges={line width=1pt}] { 1 -- 2 -- 3 -- 4 -- 1; }; Latex Specific To comment on proofs, just use the \\tag macro. \\notag removes numbering of equations in align environments. \\tag*{} comments without the parentheses. \\begin{align*} 1 + (2 * 4) &= 1 + 8 \\tag{multiply} &= 9 \\tag*{addition} \\end{align*}","title":"Tex"},{"location":"tex/#tex","text":"","title":"Tex"},{"location":"tex/#general","text":"Difference between Engine and Formats. The webpage here makes sense of the different levels of TeX https://www.tug.org/levels.html","title":"General"},{"location":"tex/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"tex/#spacing-between-itemize","text":"\\begin{itemize} \\setlength\\itemsep{-.5em} \\item ... \\item ... \\end{itemize}","title":"Spacing between itemize"},{"location":"tex/#side-by-side","text":"\\makebox[\\textwidth][c]{% \\begin{minipage}{.3\\linewidth} \\begin{align*} \\frac{\\mathrm{d} X}{\\mathrm{d} t} & = \\beta\\frac{S}{n}X \\\\ \\frac{\\mathrm{d} S}{\\mathrm{d} t} & = - \\beta\\frac{S}{n}X \\end{align*} \\end{minipage}% \\begin{minipage}{.3\\linewidth} \\begin{align*} \\frac{\\mathrm{d} x}{\\mathrm{d} t} & = \\beta sx \\\\ \\frac{\\mathrm{d} s}{\\mathrm{d} t} & = - \\beta xs \\end{align*} \\end{minipage} } \\begin{minipage}[tbp]{width_of_page} - A minipage is a smaller page inside the main page, can control how close things are displayed \\makebox[\\textwidth][c]{%} - centers the two pages next to each other, as long as it's less than the linewidth","title":"Side by Side"},{"location":"tex/#title-page","text":"\\documentclass{article} ... \\begin{document} \\begin{titlepage} \\centering {\\scshape \\Large Math 714 \\par} \\vspace{2cm} {\\bfseries \\huge Homework 1} \\vfill {\\Large\\itshape Michael Liou\\par} \\vfill {\\large \\today\\par} \\end{titlepage} \\end{document}","title":"Title Page"},{"location":"tex/#bibtex","text":"How bibtex generally works. You have a .bib file that is the \"database\" of all the entries. In the .tex file, this would be a minimal file \\documentclass{article} \\title{Example of bibtex} \\bibliographystyle{plain} \\begin{document} This example is from \\cite{Kant}. \\bibliography{master} \\end{document} The .bib file should look like this @book{durrett2019probability, place={Cambridge}, edition={5}, series={Cambridge Series in Statistical and Probabilistic Mathematics}, title={Probability: Theory and Examples}, DOI={10.1017/9781108591034}, publisher={Cambridge University Press}, author={Durrett, Rick}, year={2019}, collection={Cambridge Series in Statistical and Probabilistic Mathematics} } The document looks for master.bib in the directory of the tex file. You may need to run pdflatex -> bibtex -> pdflatex -> pdflatex . I have no idea what's going on in this sequence, but it seems necessary to generate the references correctly. bibtex from the command line looks at the generated .aux file for proper references. There, it will look for a \\bibitem for the database of references, and use that file to make sure all the references are found. If not the error messages/log will tell you which references in the original .tex document are not found. I'd also recommend using the package natbib . OverLeaf on natbib","title":"Bibtex"},{"location":"tex/#tlmgr","text":"This is the Tex Live Package Manager Fixing the error \"bbm.sty\" not found, we can find the package that it's in. tlmgr search --file bbm.sty --global sudo tlmgr install NAME_OF_PACKAGE","title":"tlmgr"},{"location":"tex/#installation-of-additional-packages","text":"Texmf tree, is tex and metafonts. The data file structure is TDS, tex directory structure. https://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages","title":"Installation of additional Packages"},{"location":"tex/#tables-booktabs","text":"This is the package you should be using if you create a table. Here's a helpful reference Tables \\begin{table*}[!ht] \\centering \\begin{tabular}{llllllll} \\toprule \\phantom{abc} & \\multicolumn{7}{c}{Round}\\\\ & 1 & 2 & 3 & 4 & 5 & 6 & 7 \\\\ \\midrule Arm 1 & 10 & & 0 & 0 & 0 & \\\\ Arm 2 & & 0 & & & & 10 & 0 \\\\ \\bottomrule \\end{tabular} \\end{table*}","title":"Tables (Booktabs)"},{"location":"tex/#algorithms","text":"Just use Algorithmicx . The syntax is easier than Algorithm2e, and it's fine.","title":"Algorithms"},{"location":"tex/#mathematical-images","text":"http://ctan.mirrors.hoobly.com/info/lshort/english/lshort.pdf http://www.texample.net/tikz/ http://www.texample.net/tikz/resources/#tools-that-generate-pgftikz-code","title":"Mathematical images"},{"location":"tex/#tikz","text":"Axes \\draw [{Latex[length=2mm]}-{Latex[length=2mm]}] (1,0) node [below] {$P$} -- (0,0) -- (0,1) node [left] {$\\beta (P)$}; Curves \\draw plot [smooth, tension=1] coordinates{(0, .7) (.5, .05) (1, .7)}; \\draw [] (0, .7) to[in=180, out=0] (.5, .05) to[in=180, out=0] (1, .7) Dots \\node [circle, fill, inner sep=1pt] at (0,1) {}; Shapes \\draw [red, dashed] (0, 0) circle (5);","title":"Tikz"},{"location":"tex/#graphs","text":"\\usetikzlibrary{graphs, graphdrawing} % graphdrawing makes the graph layout automatic \\usegdlibrary{layered, force} % provides \"force\" and \"layered\" layouts \\usetikzlibrary{positioning} % right = of a \\begin{tikzpicture} \\graph[spring layout, nodes={circle, draw, .5pt}, edges={line width=1pt}] { 1 -- 2 -- 3 -- 4 -- 1; };","title":"Graphs"},{"location":"tex/#latex-specific","text":"To comment on proofs, just use the \\tag macro. \\notag removes numbering of equations in align environments. \\tag*{} comments without the parentheses. \\begin{align*} 1 + (2 * 4) &= 1 + 8 \\tag{multiply} &= 9 \\tag*{addition} \\end{align*}","title":"Latex Specific"},{"location":"web/","text":"Static Site Generators A list of Static Site Generators There's a lot of them, Gatsby is probably the newest, using React and can create large ecommerce websites. It's more complex though. Dribbble - best of the web Documentation Generators Docsify - what I used for the SGSA website, vue.js based Docusaurus - what the personal docs are made from. reactjs based. Web Design Best Reference for Flexboxes -- css tricks Interneting is Hard - overall resrouce with html and css Visualization Landscape People/Examples Nadieh Bremer - lots of stunning visualizations Elijah Meeks - Wrote d3 in action 2d animation - artisted my favorite cat game from google on halloween! Kevin Quealy - Graphics Editor at NYT Extensions to D3 Dimple - pretty basic graphics that look nice, not sure if they're very extensible, but you've used these before! nvd3 (~6k stars) Non-d3 for the web Vega - visualization grammar Vega-Lite - higher level grammar that compiles to Vega. HTML Libraries Chartjs - most popular framework. Baidu Echarts - very nice library of a lot of different charts. Some documentation is in chinese. MetricGraphics.js - optimized for timeseries Highcharts - easy to use interactive charts... (7k stars) Chartist - pretty unique abilities, more responsive and simple. React Charting Recharts - reusable react components (12k stars) Python Libraries Altair - the python library built on Vega and Vega-Lite Holoviews - Python library for interactive visualization Datashader - python based to create meaningful representations of large datasets. Javascript Definitions Node - asynchronous event driven JavaScript server-side runtime (javascript outside of the browser) NPM vs Yarn - both package managers for Node, npm is the one built in, yarn is the one that is facebook open source. Grunt vs Gulp vs Webpack - both are tas runners, automating basic tasks in web dev. ie processing sass files. Webpack bundles a bunch of stuff into a few final files. Then all the modules that depend on each other it'll help package it all up into static assets. Also has a little task runner included. Webpack has become WAY more popular. Packages budo - could help with rapid development. Nadieh Bremer uses it for live refresh I think rough.js - make graphics with a sketch appearance, which looks really nice! and custom! Some Cool Visualizations Free Congress - how money controls government Visual Information Theory - visualizing what information theory means.","title":"Web Related"},{"location":"web/#static-site-generators","text":"A list of Static Site Generators There's a lot of them, Gatsby is probably the newest, using React and can create large ecommerce websites. It's more complex though. Dribbble - best of the web","title":"Static Site Generators"},{"location":"web/#documentation-generators","text":"Docsify - what I used for the SGSA website, vue.js based Docusaurus - what the personal docs are made from. reactjs based.","title":"Documentation Generators"},{"location":"web/#web-design","text":"Best Reference for Flexboxes -- css tricks Interneting is Hard - overall resrouce with html and css","title":"Web Design"},{"location":"web/#visualization-landscape","text":"","title":"Visualization Landscape"},{"location":"web/#peopleexamples","text":"Nadieh Bremer - lots of stunning visualizations Elijah Meeks - Wrote d3 in action 2d animation - artisted my favorite cat game from google on halloween! Kevin Quealy - Graphics Editor at NYT","title":"People/Examples"},{"location":"web/#extensions-to-d3","text":"Dimple - pretty basic graphics that look nice, not sure if they're very extensible, but you've used these before! nvd3 (~6k stars)","title":"Extensions to D3"},{"location":"web/#non-d3-for-the-web","text":"Vega - visualization grammar Vega-Lite - higher level grammar that compiles to Vega. HTML Libraries Chartjs - most popular framework. Baidu Echarts - very nice library of a lot of different charts. Some documentation is in chinese. MetricGraphics.js - optimized for timeseries Highcharts - easy to use interactive charts... (7k stars) Chartist - pretty unique abilities, more responsive and simple. React Charting Recharts - reusable react components (12k stars) Python Libraries Altair - the python library built on Vega and Vega-Lite Holoviews - Python library for interactive visualization Datashader - python based to create meaningful representations of large datasets.","title":"Non-d3 for the web"},{"location":"web/#javascript","text":"","title":"Javascript"},{"location":"web/#definitions","text":"Node - asynchronous event driven JavaScript server-side runtime (javascript outside of the browser) NPM vs Yarn - both package managers for Node, npm is the one built in, yarn is the one that is facebook open source. Grunt vs Gulp vs Webpack - both are tas runners, automating basic tasks in web dev. ie processing sass files. Webpack bundles a bunch of stuff into a few final files. Then all the modules that depend on each other it'll help package it all up into static assets. Also has a little task runner included. Webpack has become WAY more popular.","title":"Definitions"},{"location":"web/#packages","text":"budo - could help with rapid development. Nadieh Bremer uses it for live refresh I think rough.js - make graphics with a sketch appearance, which looks really nice! and custom!","title":"Packages"},{"location":"web/#some-cool-visualizations","text":"Free Congress - how money controls government Visual Information Theory - visualizing what information theory means.","title":"Some Cool Visualizations"},{"location":"windflowers/","text":"Windflowers How to get each hybrid Hybrid Color Parent 1 Parent 2 Chance Other possible colors Pink Red (seed) Orange (seed) 100% - Blue White (seed) White (seed) 25% White (seed), White Pink (Special) Pink Blue 25% Red, Orange, White (seed) Purple Pink (Special) Pink (Special) 6.25% All Mass produce Blue If all you want is a lot of blue windflowers, the method to mass produce them is very straightforward. However, know that if you want to make purple windflowers, you will actually make plenty of blue along the way, and it might be better to follow the mass product purple procedure. Plant White (seed) windflowers in diagonal shape pattern When White hybrids appears, throw them away (or sell, or plant elsewhere), because some of them are White windflowers that will never produce Blue. 25% of the hybrids in this areas will be Blue hybrids. Once a blue hybrid appears, go to step 2. Replace White (seed) flowers with Blue hybrid A Blue hybrid bred with a White (seed) is twice as likely (50%) to spawn a Blue . Once you get another Blue hybrid, go to step 3. Continue replacing White (seed) flowers with Blue hybrids, starting with the White (seed) flowers that touch the most Blue flowers, then those touching the most other White (seed) flowers. A Blue hybrid bred with a Blue hybrid will only spawn a Blue (4x as likely as the White + White combination). Eventually, after repeating step 3 many times, the entire flower bed will be Blue flowers. At this point, every hybrid in this area will also be Blue , and you will be mass producing Blue flowers! Details: Genetics of each flower Windflowers use 3 genes: R, O, W. Name Genetics White (seed) rr-oo-Ww Red (seed) RR-oo-WW Orange (seed) rr-OO-WW Blue rr-oo-ww","title":"Windflowers"},{"location":"windflowers/#windflowers","text":"","title":"Windflowers"},{"location":"windflowers/#how-to-get-each-hybrid","text":"Hybrid Color Parent 1 Parent 2 Chance Other possible colors Pink Red (seed) Orange (seed) 100% - Blue White (seed) White (seed) 25% White (seed), White Pink (Special) Pink Blue 25% Red, Orange, White (seed) Purple Pink (Special) Pink (Special) 6.25% All","title":"How to get each hybrid"},{"location":"windflowers/#mass-produce-blue","text":"If all you want is a lot of blue windflowers, the method to mass produce them is very straightforward. However, know that if you want to make purple windflowers, you will actually make plenty of blue along the way, and it might be better to follow the mass product purple procedure. Plant White (seed) windflowers in diagonal shape pattern When White hybrids appears, throw them away (or sell, or plant elsewhere), because some of them are White windflowers that will never produce Blue. 25% of the hybrids in this areas will be Blue hybrids. Once a blue hybrid appears, go to step 2. Replace White (seed) flowers with Blue hybrid A Blue hybrid bred with a White (seed) is twice as likely (50%) to spawn a Blue . Once you get another Blue hybrid, go to step 3. Continue replacing White (seed) flowers with Blue hybrids, starting with the White (seed) flowers that touch the most Blue flowers, then those touching the most other White (seed) flowers. A Blue hybrid bred with a Blue hybrid will only spawn a Blue (4x as likely as the White + White combination). Eventually, after repeating step 3 many times, the entire flower bed will be Blue flowers. At this point, every hybrid in this area will also be Blue , and you will be mass producing Blue flowers!","title":"Mass produce Blue"},{"location":"windflowers/#details-genetics-of-each-flower","text":"Windflowers use 3 genes: R, O, W. Name Genetics White (seed) rr-oo-Ww Red (seed) RR-oo-WW Orange (seed) rr-OO-WW Blue rr-oo-ww","title":"Details: Genetics of each flower"}]}